import { JwtService } from '@nestjs/jwt';
import { UsersService } from '../users/users.service';
import { CreateUserDto } from 'src/users/dtos/create-user.dto';
import { UpdateUserDto } from 'src/users/dtos/update-user.dto';
import { TypesService } from 'src/types/types.service';
import { StudentService } from 'src/student/student.service';
import { TeacherService } from 'src/teacher/teacher.service';
export declare class AuthService {
    private userService;
    private jwtService;
    private typesService;
    private studentService;
    private teacherService;
    constructor(userService: UsersService, jwtService: JwtService, typesService: TypesService, studentService: StudentService, teacherService: TeacherService);
    validateUser(email: string): Promise<any>;
    login(data: any): Promise<{
        accessToken: string;
        studentId: any;
        teacherId: any;
        id: number;
        fName: string;
        lName: string;
        phoneNumber: string;
        active: boolean;
        email: string;
        role: import("../users/entity/User").UserRole;
        teacher: import("../teacher/entity/Teacher").TeacherEntity;
        student: import("../student/entity/Student").Student;
        reels: import("../reels/entity/Reel").ReelEntity[];
        shortVideos: import("../short-video/entity/ShortVideo").ShortVideoEntity[];
        articles: import("../article/entity/Article").ArticleEntity[];
        reelLikes: import("../reel-like/entity/ReelLike").ReelLikeEntity[];
        reelComment: import("../reel-comment/entity/ReelComment").ReelCommentEntity[];
        shortVideoLikes: import("../short-video-like/entity/ShortVideoLike").ShortVideoLikeEntity[];
        shortVideoComments: import("../short-video-comment/entity/ShortVideoComment").ShortVideoCommentEntity[];
        articleLikes: import("../article-like/entity/ArticleLike").ArticleLike[];
        articleComments: import("../article-comment/entity/ArticleComment").ArticleComment[];
        articleReads: import("../article-reed/entity/ArticleReed").ArticleRead[];
        notifications: import("../notification/entity/Notification").Notification[];
        createdAt: Date;
    }>;
    register(data: CreateUserDto & {
        typeId?: number;
    }): Promise<{
        accessToken: string;
        id: number;
        fName: string;
        lName: string;
        phoneNumber: string;
        active: boolean;
        email: string;
        role: import("../users/entity/User").UserRole;
        teacher: import("../teacher/entity/Teacher").TeacherEntity;
        student: import("../student/entity/Student").Student;
        reels: import("../reels/entity/Reel").ReelEntity[];
        shortVideos: import("../short-video/entity/ShortVideo").ShortVideoEntity[];
        articles: import("../article/entity/Article").ArticleEntity[];
        reelLikes: import("../reel-like/entity/ReelLike").ReelLikeEntity[];
        reelComment: import("../reel-comment/entity/ReelComment").ReelCommentEntity[];
        shortVideoLikes: import("../short-video-like/entity/ShortVideoLike").ShortVideoLikeEntity[];
        shortVideoComments: import("../short-video-comment/entity/ShortVideoComment").ShortVideoCommentEntity[];
        articleLikes: import("../article-like/entity/ArticleLike").ArticleLike[];
        articleComments: import("../article-comment/entity/ArticleComment").ArticleComment[];
        articleReads: import("../article-reed/entity/ArticleReed").ArticleRead[];
        notifications: import("../notification/entity/Notification").Notification[];
        createdAt: Date;
    }>;
    getProfile(id: number): Promise<import("../users/entity/User").UserEntity>;
    update(id: number, data: UpdateUserDto): Promise<import("../users/entity/User").UserEntity>;
    delete(id: number): Promise<import("../users/entity/User").UserEntity>;
}
