import { TeacherEntity } from './entity/Teacher';
import { Repository } from 'typeorm';
import { CreateTeacherDto } from './dtos/create-teacher.dto';
import { UpdateTeacherDto } from './dtos/update-teacher.dto';
import { UpdateTeacherProfileDto } from './dtos/update-teacher-profile.dto';
import { UsersService } from 'src/users/users.service';
import { TypesService } from 'src/types/types.service';
import { CertificateEntity } from 'src/certificate/entities/certificate.entity';
import { ArticleEntity } from 'src/article/entity/Article';
import { ReelEntity } from 'src/reels/entity/Reel';
import { Course } from 'src/course/entities/course.entity';
import { Follower } from 'src/follower/entities/follower.entity';
import { StudentService } from 'src/student/student.service';
import { RateService } from 'src/rate/rate.service';
export declare class TeacherService {
    private teacherRepo;
    private certificateRepo;
    private articleRepo;
    private reelRepo;
    private courseRepo;
    private followerRepo;
    private readonly userService;
    private readonly typeService;
    private readonly studentService;
    private readonly rateService;
    constructor(teacherRepo: Repository<TeacherEntity>, certificateRepo: Repository<CertificateEntity>, articleRepo: Repository<ArticleEntity>, reelRepo: Repository<ReelEntity>, courseRepo: Repository<Course>, followerRepo: Repository<Follower>, userService: UsersService, typeService: TypesService, studentService: StudentService, rateService: RateService);
    createTeacher(id: number, cvPath: string | undefined, certificatePaths: string[], data: CreateTeacherDto): Promise<TeacherEntity>;
    find(): Promise<TeacherEntity[]>;
    private checkFollowStatus;
    findByUserType(user: any): Promise<TeacherEntity[]>;
    findOneByUserType(user: any, teacherId: number): Promise<{
        averageRating: number;
        id: number;
        facebookUrl: string;
        instagramUrl: string;
        certificate: CertificateEntity;
        coverLetter: string;
        cv: string;
        userId: number;
        typeId: number;
        user: import("../users/entity/User").UserEntity;
        type: import("../types/entity/Type").TypeEntity;
        followers: Follower[];
        course: Course[];
        conversationRooms: import("../conversation-room/entity/ConversationRoom").ConversationRoom[];
        stories: import("../story/entity/Story").Story[];
        rates: import("../rate/entities/rate.entity").Rate[];
        discounts: import("../discounts/entities/discount.entity").Discount[];
        coupons: import("../discounts/entities/coupon.entity").Coupon[];
        createdAt: Date;
    }>;
    findOneByUser(id: number): Promise<TeacherEntity>;
    findOneById(id: number): Promise<TeacherEntity>;
    delete(id: number): Promise<TeacherEntity>;
    update(id: number, data: UpdateTeacherDto): Promise<TeacherEntity>;
    updateProfile(userId: number, data: UpdateTeacherProfileDto): Promise<TeacherEntity>;
    updateCV(userId: number, newCvFilename: string): Promise<TeacherEntity>;
    getTeacherArticles(userId: number): Promise<ArticleEntity[]>;
    getTeacherReels(userId: number): Promise<ReelEntity[]>;
    getTeacherCourses(userId: number): Promise<Course[]>;
}
